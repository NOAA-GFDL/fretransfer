#!/bin/csh -fx
#FRE scheduler-options
#SBATCH --chdir=/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/stdout/run
#SBATCH --output=/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/stdout/run/%x.o%j
#SBATCH --job-name=mom6_solo_global_ALE_z_1x0m2d_36pe
#SBATCH --comment=bronx-15
#SBATCH --time=20
#SBATCH --qos=normal
#SBATCH --partition=batch
#SBATCH --mail-type=fail
#SBATCH --export=NONE
#SBATCH --clusters=c3
#SBATCH --nodes=2
#SBATCH --account=gfdl_f

#===============================================================================
# The script created at 2019-05-24T11:16:25 via:
# /ncrc/home2/fms/local/opt/fre-commands/bronx-15/bin/frerun --archive --cluster=c3 --combine-history --ncores=1 --platform=ncrc3.gnu7 --qos=normal --regression=debug --target=prod --unique --walltime=240 --xmlfile=/lustre/f2/dev/gfdl/Jessica.Liptak/xml/MOM6_solo.xml mom6_solo_global_ALE_z
#===============================================================================

set -r echoOn = $?echo
set -r runtimeBeg = `date "+%s"`

if ( $echoOn ) unset echo
echo '<NOTE> : ====== FRE RUNSCRIPT ======'
echo "<NOTE> : Starting at $HOST on `date`"
if ( $echoOn ) set echo

unalias *

if ( $echoOn ) unset echo
set -r modulesHomeDir = /opt/modules/default
source $modulesHomeDir/init/tcsh

module use /sw/gaea/modulefiles

module use -a /usw/eslogin/modulefiles-c4

module load CmrsEnv

module load banner
setenv COLUMNS 148
if ( $echoOn ) set echo

if ( $?SLURM_JOB_ID ) then
   tty -s
   if ($status) then
      #set -r FRE_JOBID = $SLURM_JOB_NAME:t.o$SLURM_JOB_ID
      set -r FRE_JOBID = 'fretransfer.test'
      set -r batch
   else
     # set -r FRE_JOBID = $0:t.o`date +%s`
      set -r FRE_JOBID = 'fretransfer.test'
   endif
else
   #set -r FRE_JOBID = $0:t.o`date +%s`
   set -r FRE_JOBID = 'fretransfer.test'
endif

banner $FRE_JOBID

################################################################################
#---------------- global constants and variables, set by frerun ----------------
################################################################################

set -r freCommandsModuleFilesDir = /ncrc/home2/fms/local/modulefiles
set -r freCommandsVersion = bronx-15

set -r project = gfdl_f

set -r platform = ncrc3.gnu7
set -r target = prod
set -r name = mom6_solo_global_ALE_z
set -r rtsxml = /lustre/f2/dev/gfdl/Jessica.Liptak/xml/MOM6_solo.xml
set -r stdoutDir = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/stdout/run
set -r stdoutTmpDir = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/stdout/run
set -r stateDir = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/state/1x0m2d_36pe/run
set -r workDir = /lustre/f2/scratch/Jessica.Liptak/work/xanadu_mom6_2019.07.02_dev_gfdl/$FRE_JOBID
set -r ptmpDir = /lustre/f2/scratch/Jessica.Liptak/ptmp
set -r archiveDir = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/archive
set -r scriptName = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/scripts/run/mom6_solo_global_ALE_z_1x0m2d_36pe
set -r executable = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/mom6_solo_compile/ncrc3.gnu7-prod/exec/fms_mom6_solo_compile.x
set -r segmentsPerSimulation = 1
set segmentsPerPPCall = 0
set -r segmentsPerJob = 1
set -r monthslist = ( 0 )
set -r dayslist = ( 2 )
set -r hourslist = ( 0 )
set -r timeStampOptions = ( -f digital )
set -r baseDate = '0 0 0 0 0 0'
set -r mailMode = fail
set -r includeDir = 
set -r includeDirRemote = 

set -r platformRemote = ''
set -r stdoutDirRemote = ''
set -r stmpDirRemote = ''
set -r archiveDirRemote = ''
set -r envRemote = ''
set -r freCommandsVersionRemote = ''

set -r outputStagerSaveCluster = es
set -r outputStagerSavePartition = ldtn
set -r outputStagerSaveCoreSpec = 01
set -r outputStagerSaveRuntimeAscii = 8:00:00
set -r outputStagerSaveRuntimeRestart = 8:00:00
set -r outputStagerSaveRuntimeHistory = 8:00:00
set -r outputStagerSaveRetries = 4

set -r outputStagerXferCluster = es
set -r outputStagerXferPartition = rdtn
set -r outputStagerXferCoreSpec = 01
set -r outputStagerXferRuntimeAscii = 16:00:00
set -r outputStagerXferRuntimeRestart = 16:00:00
set -r outputStagerXferRuntimeHistory = 16:00:00
set -r outputStagerXferRetries = 4

set -r workDirCleanerPartition = ldtn
set -r workDirCleanerCoreSpec = 01
set -r workDirCleanerRuntime = 8:00

set -r finisherPartition = ldtn
set -r finisherCoreSpec = 01
set -r finisherRuntime = 8:00

set -r ppStarterCluster = gfdl
set -r ppStarterPartition = stage
set -r ppStarterCoreSpec = 01
set -r ppStarterCombineOffLargeOffConstraint = 
set -r ppStarterCombineOffLargeOffRuntime = 12:00:00
set -r ppStarterCombineOffLargeOnConstraint = bigvftmp
set -r ppStarterCombineOffLargeOnRuntime = 16:00:00
set -r ppStarterCombineOnLargeOffConstraint = 
set -r ppStarterCombineOnLargeOffRuntime = 1:00:00
set -r ppStarterCombineOnLargeOnConstraint = 
set -r ppStarterCombineOnLargeOnRuntime = 1:00:00
set -r ppStarterHistorySizeThreshold = 8192

set -r flagRunTypeRegression
set -r flagCheckSumOff
set -r flagWorkDirCleanOff
set -r flagOutputTypeUnique
set -r flagOutputFormat64Bit
set -r flagOutputStagingTypeChained
set -r flagOutputCacheHistoryOff
set -r flagOutputCombineHistoryOn
set -r flagOutputCompressAsciiOff
set -r flagOutputCompressRestartOff
set -r flagOutputCompressHistoryOff
set -r flagOutputArchiveOn
set -r flagOutputPostProcessOff
set -r flagOutputXferOff
set -r flagOutputCheckOff
set -r flagVerbosityOff
set -r flagOutputFillGridOff

set outputDir = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/xanadu_mom6_2019.07.02_dev_gfdl/mom6_solo_global_ALE_z/ncrc3.gnu7-prod/archive/1x0m2d_36pe
set gridSpec = /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/grid_spec.nc
set initCond = /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/GOLD_IC.2010.11.15.nc

  set -r npes = 36
  set -r atm_ranks = 
  set -r tot_atm_ranks = 
  set -r atm_threads = 
  set -r atm_layout = 
  set -r atm_io_layout = 
  set -r atm_mask_table = 
  set -r atm_hyperthread = .false.
  set -r scheduler_atm_threads = 
  set -r ocn_ranks = 36
  set -r tot_ocn_ranks = 
  set -r ocn_threads = 
  set -r ocn_layout = 9,4
  set -r ocn_io_layout = 1,1
  set -r ocn_mask_table = MOM_mask_table
  set -r ocn_hyperthread = .false.
  set -r scheduler_ocn_threads = 1
  set -r lnd_ranks = 
  set -r tot_lnd_ranks = 
  set -r lnd_threads = 
  set -r lnd_layout = 
  set -r lnd_io_layout = 
  set -r lnd_mask_table = 
  set -r lnd_hyperthread = .false.
  set -r scheduler_lnd_threads = 
  set -r ice_ranks = 
  set -r tot_ice_ranks = 
  set -r ice_threads = 
  set -r ice_layout = 6,6
  set -r ice_io_layout = 1,1
  set -r ice_mask_table = MOM_mask_table
  set -r ice_hyperthread = .false.
  set -r scheduler_ice_threads = 

alias runCommand time `which srun` --verbose --export=ALL --ntasks=$npes --cpus-per-task=1 ./$executable:t
alias runCommandTest echo Not using srun-multi

set -r mppnccombineOptsRestart = '-64 -h 16384 -m'
set -r mppnccombineOptsHistory = '-64 -h 16384 -m'

set -r FreCommandsSrcDir = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/mom6_solo_compile/src
set -r FreCommandsBldDir = /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork_dev_gfdl/mom6_solo_compile/ncrc3.gnu7-prod/exec

################################################################################
#------------------------ global constants and aliases -------------------------
################################################################################

if ( -d $freCommandsModuleFilesDir && -r $freCommandsModuleFilesDir ) then
   module use $freCommandsModuleFilesDir
else
   if ( $echoOn ) unset echo
   echo "*ERROR*: The 'fre' modulefiles directory '$freCommandsModuleFilesDir' doesn't exist or not readable"
   if ( $echoOn ) set echo
   exit 1
endif

if ( $echoOn ) unset echo

# Platform environment defaults from /ncrc/home2/fms/local/opt/fre-commands/bronx-15/site/ncrc3/env.defaults.gnu
module unload cray-netcdf cray-hdf5 fre
module unload PrgEnv-pgi PrgEnv-intel PrgEnv-gnu PrgEnv-cray
module load PrgEnv-gnu/6.0.3
module swap gcc gcc/7.2.0
module load fre/bronx-15
module load cray-hdf5/1.8.16
module load git

setenv KMP_STACKSIZE 512m
setenv NC_BLKSZ 1M
setenv F_UFMTENDIAN big
# MAIN_PROGRAM env is needed by the GNU compile
setenv MAIN_PROGRAM coupler/coupler_main.o

# Platform environment overrides from XML

module list
if ( $echoOn ) set echo

set freCommandsModuleFile = $freCommandsModuleFilesDir/fre/$freCommandsVersion
if ( -f $freCommandsModuleFile && -r $freCommandsModuleFile ) then
   if ( $echoOn ) unset echo
   module unload fre
   module use $freCommandsModuleFilesDir
   module load fre/$freCommandsVersion
   if ( $echoOn ) set echo
else
   if ( $echoOn ) unset echo
   echo "*ERROR*: The 'fre' modulefile '$freCommandsModuleFile' doesn't exist or not readable"
   if ( $echoOn ) set echo
   exit 1
endif
unset freCommandsModuleFile

set -r architecture = 'x86_64'

set machine = `uname -m`

if ( $machine != $architecture ) then
   if ( $echoOn ) unset echo
   echo "*ERROR*: The script '$scriptName' is intended for the machine architecture '$architecture'"
   if ( $echoOn ) set echo
   exit 1
endif

unset machine

set -r work = $workDir

set -r hsmDir = $workDir/hsm

set -r tmpOutputDir = $workDir/output.stager

set -r checkPointDir = /usw/checkpoint

set -r envFile = /tmp/shell.variables.$FRE_JOBID
set -r envFileDelay = 2

set -r patternGrepAscii = '\<out\>|\<results\>|\<log\>|\<timestats\>|\<stats\>|\<velocity_truncations\>'
set -r patternGrepRestart = '\<res\>|\<nc\>|\.input.\tgz$|\.ww3$'
set -r patternGrepRestartNextDrop = '\<res\>'
set -r patternGrepRestartNextMove = '\<res\>|\<nc\>|\.ww3$'
set -r patternGrepHistory = '\<nc\>|\.ww3$'
set -r patternGrepRegion = '^rregion'

set -r patternSedHome = 's/^\/(autofs|ncrc)\/.+\/'$USER'\//\/home\/'$USER'\/ncrc\//'
set -r patternSedSCRATCH = 's|^'$SCRATCH'/?([^/]*/)?'$USER'/|/home/'$USER'/ncrc/|'
set -r patternSedDEV = 's|^'$DEV'/?([^/]*/)?'$USER'/|/home/'$USER'/ncrc/|'

set -r patternSedCTMP = "$patternSedSCRATCH"
set -r patternSedCPERM = "$patternSedDEV"

set -r archExt = 'tar'

set -r submitOptionsCommon = ( --mail-type=$mailMode )
set -r submitOptionsOutputStagerSave = ( $submitOptionsCommon --chdir=$stdoutDir --output=$stdoutDir/%x.o%j --clusters=$outputStagerSaveCluster --partition=$outputStagerSavePartition )
set -r submitOptionsOutputStagerXfer = ( $submitOptionsCommon --chdir=$stdoutDir --output=$stdoutDir/%x.o%j --clusters=$outputStagerXferCluster --partition=$outputStagerXferPartition )
set -r submitOptionsWorkDirCleaner =   ( $submitOptionsCommon --chdir=$stdoutDir --output=$stdoutDir/%x.o%j --partition=$workDirCleanerPartition )
set -r submitOptionsFinisher =         ( $submitOptionsCommon --chdir=$stdoutDir --output=$stdoutDir/%x.o%j --partition=$finisherPartition )
set -r submitOptionsPPStarter =        ( $submitOptionsCommon --clusters=$ppStarterCluster --partition=$ppStarterPartition )

set -r outputStagingType = `set -r | grep '^flagOutputStagingType' | sed 's/flagOutputStagingType//'`

alias expandVariables `which expand_variables` --verbose
alias findModuleInfo `which find_module_info` --verbose
alias findXIncludes `which find_xincludes` --verbose
alias finisher `which batch_copy.csh`
alias prepareDir `which prepare_dir.csh`
alias timeStamp `which time_stamp.csh` $timeStampOptions
alias workDirCleaner `which batch_rmdir.csh`
alias adjust_dry_mass_tool `which adjust_dry_mass.csh`

set -r workDirCleaner = `alias workDirCleaner`
set -r finisher = `alias finisher`

alias submit `which batch.scheduler.submit` --verbose
alias outputStager `which output.stager`

set -r outputStager = `alias outputStager`
@ outputStagerErrors = 0

alias find `which lfs` find

################################################################################
#---------------------------------- finisher -----------------------------------
################################################################################

if ( $?batch && ! $?FRE_STAGE && ( "$stdoutDir" != "$stdoutTmpDir" ) ) then
   set finisherOptions = ( $submitOptionsFinisher --job-name=$FRE_JOBID.finisher)
   set finisherOptions = ( $finisherOptions --time=$finisherRuntime --mincpus=$finisherCoreSpec )
   set finisherOptions = ( $finisherOptions --export=src=$stdoutTmpDir/$FRE_JOBID,dstDir=$stdoutDir )
   set finisherOptions = ( $finisherOptions --dependency=afterany:$SLURM_JOB_ID )

   set finisherResult = `submit -O "$finisherOptions" $finisher`

   if ( $status == 0 ) then
      if ( $echoOn ) unset echo
      echo "<NOTE> : The finisher job '$finisherResult' has been submitted successfully"
      if ( $echoOn ) set echo
   else
      if ( $echoOn ) unset echo
      echo "WARNING: Can't submit the finisher job"
      if ( $echoOn ) set echo
   endif

   unset finisherResult
   unset finisherOptions
endif

################################################################################
#--------------------------------- environment ---------------------------------
################################################################################

set hsmInfo = ( `findModuleInfo 'hsm'` )

if ( $status == 0 ) then
   set -r hsmModuleFilesDir = $hsmInfo[1]
   set -r hsmVersion = $hsmInfo[3]
   if ( $echoOn ) unset echo
   echo "<NOTE> : Using the 'hsm' modulefiles directory '$hsmModuleFilesDir' and version '$hsmVersion'..."
   if ( $echoOn ) set echo
else
   if ( $echoOn ) unset echo
   echo "*ERROR*: The script '$scriptName' must load an 'hsm' module"
   if ( $echoOn ) set echo
   exit 1
endif

unset hsmInfo

if ( $?flagVerbosityOn ) then
   set hsm_verbose = "--verbose"
else
   set hsm_verbose = "--quiet"
endif

alias hsmget `which hsmget` ${hsm_verbose} --time --workroot=$hsmDir --ptmproot=$ptmpDir --archroot=//
alias hsmput `which hsmput` ${hsm_verbose} --time --workroot=$tmpOutputDir --ptmproot=$ptmpDir --archroot=//

limit stacksize unlimited
limit coredumpsize unlimited
limit

if ( $#dayslist != $segmentsPerJob || $#monthslist != $segmentsPerJob || $#hourslist != $segmentsPerJob ) then
   if ( $echoOn ) unset echo
   echo "*ERROR*: dayslist, monthslist and hourslist lengths must be equal to a number of segments per job"
   if ( $echoOn ) set echo
   exit 1
endif

set gcpInfo = ( `findModuleInfo 'gcp'` )

if ( $status == 0 ) then
   set -r xferToolModuleFilesDir = $gcpInfo[1]
   set -r xferToolVersion = $gcpInfo[3]
   if ( $echoOn ) unset echo
   echo "<NOTE> : Using the 'gcp' modulefiles directory '$xferToolModuleFilesDir' and version '$xferToolVersion'..."
   if ( $echoOn ) set echo
else
   if ( $echoOn ) unset echo
   echo "*ERROR*: The script '$scriptName' must load a 'gcp' module"
   if ( $echoOn ) set echo
   exit 1
endif

unset gcpInfo

set xmlFiles = ( `findXIncludes $rtsxml` )

if ( $status == 0 ) then
   if ( $echoOn ) unset echo
   echo "<NOTE> : All the needed pieces of the XML file have been found"
   if ( $echoOn ) set echo
else
   if ( $echoOn ) unset echo
   echo "*ERROR*: Can't find all the needed pieces of the XML file"
   if ( $echoOn ) set echo
   exit 1
endif

if ( $?FRE_SYSTEM_TMP ) then
   if ( $echoOn ) unset echo
   echo "<NOTE> : Using the '$FRE_SYSTEM_TMP' temporary directory"
   if ( $echoOn ) set echo
   prepareDir $FRE_SYSTEM_TMP
   if ( $status != 0 ) then
      if ( $echoOn ) unset echo
      echo "*ERROR*: Unable to setup tmp directory '$FRE_SYSTEM_TMP'"
      if ( $echoOn ) set echo
      exit 1
   endif
else
   if ( $echoOn ) unset echo
   echo "*ERROR*: The FRE temporary directory is not defined"
   if ( $echoOn ) set echo
   exit 1
endif

  # NiNaC not loaded when script created

################################################################################
#----------------------------- global variables --------------------------------
################################################################################

set continueFlag = 1

set submitOptionsProject = ( --account=$project )

set combineList = ( )
set saveJobIds = ( )
set argFiles = ( )

@ currentSeg = 1
@ irun = 1

################################################################################
#--------------------------- before the main loop ------------------------------
################################################################################



if ( $?flagRunTypeProduction ) then
#   prepareDir $stateDir
   if ( $status != 0 ) then
      if ( $echoOn ) unset echo
      echo "*ERROR*: Unable to setup the state directory '$stateDir'"
      if ( $echoOn ) set echo
      exit 1
   endif
   set reload_file = $stateDir/reload_commands

   if ( -f $reload_file ) then
      if ( -r $reload_file ) then
         source $reload_file
         if ( $#argFiles > 0 ) then
            if ( `echo $argFiles | tr ' ' "\n" | grep --count "^$FRE_JOBID"` != $#argFiles ) then
               set saveJobIds = ( )
               set argFiles = ( )
            endif
         endif
      else
         if ( $echoOn ) unset echo
         echo "*ERROR*: The reload file '$reload_file' is not readable"
         if ( $echoOn ) set echo
         exit 1
      endif
   endif

   set queue_file = $stateDir/queue_commands

   if ( -f $queue_file ) then
      if ( -r $queue_file ) then
         source $queue_file
      else
         if ( $echoOn ) unset echo
         echo "*ERROR*: The queue file '$queue_file' is not readable"
         if ( $echoOn ) set echo
         exit 1
      endif
   else
      touch $queue_file
      if ( $status == 0 ) then
         if ( $echoOn ) unset echo
         echo "<NOTE> : Writing queue information to the queue file '$queue_file' at `date +%s`"
         if ( $echoOn ) set echo
         echo "set continueFlag = $continueFlag" >> $queue_file
         chmod 644 $queue_file
      else
         if ( $echoOn ) unset echo
         echo "*ERROR*: The queue file '$queue_file' can't be saved"
         if ( $echoOn ) set echo
         exit 1
      endif
   endif

   if ( ! $continueFlag ) then
      if ( $echoOn ) unset echo
      echo "<NOTE> : Stopping execution"
      if ( $echoOn ) set echo
      exit 0
   endif
endif

if ( $?fyear ) then
   #remove leading zeros, fyear as integer
   set fyearint = `echo $fyear | sed 's/^0*//'`
   if ( ${fyearint} > 0 ) then
      @ fyearm1 = ${fyearint} - 1
      set fyearm1 = `printf "%04d" $fyearm1`
   else
      set fyearm1 = '0000'
   endif
   @ fyearp1 = ${fyearint} + 1
   set fyearp1 = `printf "%04d" $fyearp1`
   @ fyearp2 = ${fyearint} + 2
   set fyearp2 = `printf "%04d" $fyearp2`
endif

if ( $?ireload ) then
   # Using old way to calculate currentSeg
   # Get best guess --- may not be correct if user changed number of segments
   # per job after job started --- frerun -e does not update state file
   @ currentSeg = ( $ireload - 1 ) * $segmentsPerJob + $irun
endif


   # ---------------- generate date for file names

   set begindate = `timeStamp -b`
   if ( $begindate == 'no_time_stamp' ) set begindate = tmp`date '+%j%H%M%S'`
   set enddate = `timeStamp -e`
   if ( $enddate == 'no_time_stamp' ) set enddate = tmp`date '+%j%H%M%S'`
   set fyear = `echo $enddate | timeStamp -y`

   # ---------------- commands, copied from XML (experiment/postProcess/csh)


         cd $work
         #Save the last line of ocean.stats without the first (step number) column as a signature of MOM6 answers
         tail -1 ocean.stats | cut -c8- > RESTART/$enddate.ocean.stats.res
         #Save the whole ocean.stats under ascii/
         mv ocean.stats $enddate.ocean.stats
         mv ocean.stats.nc $enddate.ocean.stats.nc

	 #Make a directory to trick FRE to pick up and archive in ascii
         mkdir extra.results

	 mv *velocity_truncations CPU_stats MOM_parameter_doc* extra.results/
	 #Make perftools report and trick FRE to archive them 
         ls *.xf
         if ( ! $status ) then
	   module load perftools
	   pat_report $executable:t+*.xf > extra.results/pat_report.out 
	 endif
	 mv $executable:t+* extra.results/

         

  cd $workDir
  # ---------------- remove time_stamp.out file

   if ( -f time_stamp.out ) rm -f time_stamp.out

   # ---------------- save ascii files
   set asciiFiles = ( `ls -1 | egrep "$patternGrepAscii"` )

   if ( $#asciiFiles > 0 ) then
      set asciiSuffix = ascii/$begindate.ascii_out
      set asciiArchDir = $outputDir/$asciiSuffix
      #set asciiWorkDir = $tmpOutputDir$asciiArchDir
      set asciiWorkDir = $workDir/ASCII

      prepareDir $asciiWorkDir 'clean' || exit 1

      if ( ! $?MPI_FAIL ) then
         ls -1 | egrep "$patternGrepAscii" | xargs -I'{}' mv --force '{}' $asciiWorkDir/$begindate.'{}'

         if ( $?flagOutputXferOn ) then
            if ( $?flagRunTypeRegression || $?flagOutputTypeUnique ) then
               set asciiOutputDirRemote = $outputDirRemoteAscii/$outputDir:t/$asciiSuffix
            else
               set asciiOutputDirRemote = $outputDirRemoteAscii/$asciiSuffix
            endif
         else
            set asciiOutputDirRemote = ""
         endif

         set actionSaveOn    =   1
         set actionXferOn    =   $?flagOutputXferOn
         set paramArchiveOn  =   $?flagOutputArchiveOn
         @   paramPtmpOn     = ! $?flagOutputArchiveOn
         set paramCheckSumOn =   $?flagCheckSumOn
         set paramCompressOn =   $?flagOutputCompressAsciiOn
      else
         ls -1 | egrep "$patternGrepAscii" | xargs -I'{}' ln --force '{}' $asciiWorkDir/$begindate.'{}'

         set asciiOutputDirRemote = ""
         set actionSaveOn         = 1
         set actionXferOn         = 0
         set paramArchiveOn       = 1
         set paramPtmpOn          = 0
         set paramCheckSumOn      = 0
         set paramCompressOn      = 0
      endif

      set asciiJobName = $FRE_JOBID.output.stager.$begindate.A
      set asciiArgFile = $workDir/$asciiJobName.args

      set asciiSaveOptions = ( $submitOptionsOutputStagerSave $submitOptionsProject )
      set asciiSaveOptions = ( $asciiSaveOptions --job-name=${asciiJobName}S )
      set asciiSaveOptions = ( $asciiSaveOptions --time=$outputStagerSaveRuntimeAscii --mincpus=$outputStagerSaveCoreSpec )

      set asciiXferOptions = ( $submitOptionsOutputStagerXfer $submitOptionsProject )
      set asciiXferOptions = ( $asciiXferOptions --job-name=${asciiJobName}T )
      set asciiXferOptions = ( $asciiXferOptions --time=$outputStagerXferRuntimeAscii --mincpus=$outputStagerXferCoreSpec )

      echo "set expName                   =   $name"                       > $asciiArgFile
      echo "set type                      =   ascii"                      >> $asciiArgFile
      echo "set stagingType               =   $outputStagingType"         >> $asciiArgFile
      echo "set actionCombineOn           =   0"                          >> $asciiArgFile
      echo "set actionCheckOn             =   0"                          >> $asciiArgFile
      echo "set actionSaveOn              =   $actionSaveOn"              >> $asciiArgFile
      echo "set actionXferOn              =   $actionXferOn"              >> $asciiArgFile
      echo "set actionPPStartOn           =   0"                          >> $asciiArgFile
      echo "set paramArchiveOn            =   $paramArchiveOn"            >> $asciiArgFile
      echo "set paramPtmpOn               =   $paramPtmpOn"               >> $asciiArgFile
      echo "set paramCheckSumOn           =   $paramCheckSumOn"           >> $asciiArgFile
      echo "set paramCompressOn           =   $paramCompressOn"           >> $asciiArgFile
      echo "set paramVerbosityOn          =   $?flagVerbosityOn"          >> $asciiArgFile
      echo "set workDir                   =   $tmpOutputDir"              >> $asciiArgFile
      echo "set ptmpDir                   =   $ptmpDir"                   >> $asciiArgFile
      echo "set archDir                   =   $asciiArchDir"              >> $asciiArgFile
      echo "set outputDirRemote           =   $asciiOutputDirRemote"      >> $asciiArgFile
      echo "set saveOptions               = ( $asciiSaveOptions )"        >> $asciiArgFile
      echo "set xferOptions               = ( $asciiXferOptions )"        >> $asciiArgFile
      echo "set saveRetries               =   $outputStagerSaveRetries"   >> $asciiArgFile
      echo "set xferRetries               =   $outputStagerXferRetries"   >> $asciiArgFile
      echo "set saveRetry                 =   0"                          >> $asciiArgFile
      echo "set xferRetry                 =   0"                          >> $asciiArgFile
      echo "set freCommandsModuleFilesDir =   $freCommandsModuleFilesDir" >> $asciiArgFile
      echo "set freCommandsVersion        =   $freCommandsVersion"        >> $asciiArgFile
      echo "set hsmModuleFilesDir         =   $hsmModuleFilesDir"         >> $asciiArgFile
      echo "set hsmVersion                =   $hsmVersion"                >> $asciiArgFile
      echo "set xferToolModuleFilesDir    =   $xferToolModuleFilesDir"    >> $asciiArgFile
      echo "set xferToolVersion           =   $xferToolVersion"           >> $asciiArgFile
      echo "set modulesHomeDir            =   $modulesHomeDir"            >> $asciiArgFile

      # Allow FRE_*TEST* variables to pass into output.stager jobs
      if ( ${freCommandsVersion} =~ "test" ) then
         if ( $?FRE_HSM_TEST_VERSION ) then
            echo "setenv FRE_HSM_TEST_VERSION $FRE_HSM_TEST_VERSION" >> $asciiArgFile
         endif
         if ( $?FRE_GCP_TEST_VERSION ) then
            echo "setenv FRE_GCP_TEST_VERSION $FRE_GCP_TEST_VERSION" >> $asciiArgFile
         endif
         if ( $?FRE_COMMANDS_TEST ) then
            echo "setenv FRE_COMMANDS_TEST $FRE_COMMANDS_TEST" >> $asciiArgFile
         endif
         if ( $?FRE_NCTOOLS_TEST ) then
            echo "setenv FRE_NCTOOLS_TEST $FRE_NCTOOLS_TEST" >> $asciiArgFile
         endif
         if ( $?FRE_CURATOR_TEST ) then
            echo "setenv FRE_CURATOR_TEST $FRE_CURATOR_TEST" >> $asciiArgFile
         endif
      endif

      module load python/3.5.2
      alias fretransfer python3 /ncrc/home2/${USER}/fretransfer/RemoteSystemsTempFiles/fretransfer.py
      set userDefs = (-expName ${name} -fileType ascii -sourceDir ${workDir} -destDir ${outputDir} -destMachine gfdl)
      echo $userDefs

      fretransfer userDefs ${userDefs}

exit 0
      
      if ( $?flagOutputStagingTypeOnline ) then
         if ( $?MPICH_RANK_REORDER_METHOD ) then
            set mpiRankReorderMethod = $MPICH_RANK_REORDER_METHOD
            unsetenv MPICH_RANK_REORDER_METHOD
         endif

 #        outputStager $asciiArgFile

         if ( $status == 0 ) then
            if ( $echoOn ) unset echo
            echo "<NOTE> : The ascii directory '$asciiArchDir' has been processed successfully"
            if ( $echoOn ) set echo
         else
            @ outputStagerErrors += 1
            if ( $echoOn ) unset echo
            set msg =       "*WARNING*: Can't process the ascii directory '$asciiArchDir'\n"
            set msg = "${msg}*WARNING*: ascii files have not been saved, you may need to transfer them manually.\n\n"
            set msg = "${msg}*WARNING*: The ascii ArgFile has been saved at $asciiArgFile.  You may be able\n"
            set msg = "${msg}*WARNING*: use the following command:\n\n"
            set msg = "${msg}*WARNING*: $outputStager $asciiArgFile\n"
            if ( $?batch ) then
               printf "$msg" | mailx -s "Can't process ascii directory '$asciiArchDir'" $USER@noaa.gov
            endif
            printf "$msg"
            if ( $echoOn ) set echo
         endif

         if ( $?mpiRankReorderMethod ) then
            setenv MPICH_RANK_REORDER_METHOD $mpiRankReorderMethod
            unset $mpiRankReorderMethod
         endif
      else if ( $?flagOutputStagingTypeStaged ) then
         if ( $actionSaveOn ) then
            set asciiResult = `submit -O "$asciiSaveOptions --export=argFile=$asciiArgFile" $outputStager`

            if ( $status == 0 ) then
               if ( $echoOn ) unset echo
               echo "<NOTE> : The output stager job '$asciiResult' to process the '$asciiArchDir' (saving) has been submitted successfully"
               if ( $echoOn ) set echo
               set saveJobIds = ( $saveJobIds $asciiResult )
               set argFiles = ( $argFiles $asciiArgFile:t )
            else
               @ outputStagerErrors += 1
               if ( $echoOn ) unset echo
               set msg =       "*WARNING*: Can't submit the output stager job to process the '$asciiArchDir' (saving)\n"
               set msg = "${msg}*WARNING*: ascii files have not been saved, you may need to transfer them manually.\n\n"
               set msg = "${msg}*WARNING*: The ascii ArgFile has been saved at $asciiArgFile.  You may be able\n"
               set msg = "${msg}*WARNING*: use the following command:\n\n"
               set msg = "${msg}*WARNING*: $outputStager $asciiArgFile\n"
               if ( $?batch ) then
                  printf "$msg" | mailx -s "Can't submit the output stager job to process the '$asciiArchDir' (saving)" $USER@noaa.gov
               endif
               printf "$msg"
               if ( $echoOn ) set echo
            endif

            unset asciiResult
         endif

         if ( $actionXferOn ) then
            set asciiResult = `submit -O "$asciiXferOptions --export=argFile=$asciiArgFile --dependency=afterok:$saveJobIds[$#saveJobIds]" $outputStager`

            if ( $status == 0 ) then
               if ( $echoOn ) unset echo
               echo "<NOTE> : The output stager job '$asciiResult' to process the '$asciiArchDir' (transfer) has been submitted successfully"
               if ( $echoOn ) set echo
            else
               @ outputStagerErrors += 1
               if ( $echoOn ) unset echo
               set msg =       "*WARNING*: Can't submit the output stager job to process the '$asciiArchDir' (transfer)\n"
               set msg = "${msg}*WARNING*: ascii files have not been saved, you may need to transfer them manually.\n\n"
               set msg = "${msg}*WARNING*: The ascii ArgFile has been saved at $asciiArgFile.  You may be able\n"
               set msg = "${msg}*WARNING*: use the following command:\n\n"
               set msg = "${msg}*WARNING*: $outputStager $asciiArgFile\n"
               if ( $?batch ) then
                  printf "$msg" | mailx -s "Can't submit the output stager job to process the '$asciiArchDir' (transfer)" $USER@noaa.gov
               endif
               printf "$msg"
               if ( $echoOn ) set echo
            endif

            unset asciiResult
         endif
      else if ( $?flagOutputStagingTypeChained ) then
         if ( $actionSaveOn || $actionXferOn ) then
            set asciiResult = `submit -O "$asciiSaveOptions --export=argFile=$asciiArgFile" $outputStager`

            if ( $status == 0 ) then
               if ( $echoOn ) unset echo
               echo "<NOTE> : The output stager job '$asciiResult' to process the '$asciiArchDir' has been submitted successfully"
               if ( $echoOn ) set echo
               set saveJobIds = ( $saveJobIds $asciiResult )
               set argFiles = ( $argFiles $asciiArgFile:t )
            else
               @ outputStagerErrors += 1
               if ( $echoOn ) unset echo
               set msg =       "*WARNING*: Can't submit the output stager job to process the '$asciiArchDir'\n"
               set msg = "${msg}*WARNING*: ascii files have not been saved, you may need to transfer them manually.\n\n"
               set msg = "${msg}*WARNING*: The ascii ArgFile has been saved at $asciiArgFile.  You may be able\n"
               set msg = "${msg}*WARNING*: use the following command:\n\n"
               set msg = "${msg}*WARNING*: $outputStager $asciiArgFile\n"
               if ( $?batch ) then
                  printf "$msg" | mailx -s "Can't submit the output stager job to process the '$asciiArchDir'" $USER@noaa.gov
               endif
               printf "$msg"
               if ( $echoOn ) set echo
            endif

            unset asciiResult
         endif
      endif

      unset asciiXferOptions
      unset asciiSaveOptions

set -r runtimeEnd = `date "+%s"`
set -r runtime = `echo "$runtimeEnd - $runtimeBeg" | bc -l`

if ( $echoOn ) unset echo
echo "<NOTE> : Finishing on `date`"
echo "<NOTE> : Runtime = '$runtime' (seconds)"
echo "<NOTE> : Natural end-of-script for '$scriptName'"
if ( $echoOn ) set echo


      unset asciiArgFile
      unset asciiJobName

      unset paramCompressOn
      unset paramCheckSumOn
      unset paramPtmpOn
      unset paramArchiveOn
      unset actionXferOn
      unset actionSaveOn

      unset asciiOutputDirRemote
      unset asciiWorkDir
      unset asciiArchDir
      unset asciiSuffix
   endif

   unset asciiFiles
    

if ( -e $workDir ) then
   if ( -d $workDir ) then
      if ( -r $workDir ) then
         if ( -w $workDir ) then
            ls -1 --directory --file-type $workDir/* | grep --fixed-strings --invert-match $tmpOutputDir | xargs rm --force --recursive
#            prepareDir $workDir/INPUT 'clean'     || exit 1
#            prepareDir $workDir/RESTART 'clean'   || exit 1
         else
            if ( $echoOn ) unset echo
            echo "*ERROR*: The directory '$workDir' exists, but is not writable"
            if ( $echoOn ) set echo
            exit 1
         endif
      else
         if ( $echoOn ) unset echo
         echo "*ERROR*: The directory '$workDir' exists, but is not readable"
         if ( $echoOn ) set echo
         exit 1
      endif
   else
      if ( $echoOn ) unset echo
      echo "*ERROR*: The pathname '$workDir' exists, but is not a directory"
      if ( $echoOn ) set echo
      exit 1
   endif
else
#   prepareDir $workDir         || exit 1
#   prepareDir $workDir/INPUT   || exit 1
#   prepareDir $workDir/RESTART || exit 1
    prepareDir $workDir/ASCII || exit 1
endif

cd $workDir

set dataFilesNotOK = ( )

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/MOM_input && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/MOM_input $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/MOM_input )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/MOM_override && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/MOM_override $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/MOM_override )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord50.cdl && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord50.cdl $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord50.cdl )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord50.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord50.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord50.nc )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord.cdl && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord.cdl $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord.cdl )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/Layer_coord.nc )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/vgrid.cdl && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/vgrid.cdl $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/vgrid.cdl )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/vgrid.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/vgrid.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/vgrid.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/mosaic.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/mosaic.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/mosaic.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_hgrid.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_hgrid.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_hgrid.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic_tile1Xland_mosaic_tile1.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic_tile1Xland_mosaic_tile1.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic_tile1Xland_mosaic_tile1.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic_tile1Xocean_mosaic_tile1.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic_tile1Xocean_mosaic_tile1.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/atmos_mosaic_tile1Xocean_mosaic_tile1.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_hgrid.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_hgrid.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_hgrid.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mask.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mask.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mask.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mosaic.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mosaic.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mosaic.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mosaic_tile1Xocean_mosaic_tile1.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mosaic_tile1Xocean_mosaic_tile1.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/land_mosaic_tile1Xocean_mosaic_tile1.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_hgrid.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_hgrid.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_hgrid.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_mask.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_mask.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_mask.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_mosaic.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_mosaic.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_mosaic.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_vgrid.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_vgrid.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/ocean_vgrid.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/topog.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/topog.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/mosaic.unpacked/topog.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/31Layer_zgrid.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/31Layer_zgrid.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/31Layer_zgrid.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/geothermal_heating_cm2g.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/geothermal_heating_cm2g.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/geothermal_heating_cm2g.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/gustiness_qscat.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/gustiness_qscat.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/gustiness_qscat.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/OM3_zgrid.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/OM3_zgrid.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/OM3_zgrid.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_forcing_daily.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_forcing_daily.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_forcing_daily.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_forcing_monthly.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_forcing_monthly.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_forcing_monthly.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_precip_monthly.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_precip_monthly.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/ocean_precip_monthly.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/seawifs_1998-2006_GOLD_smoothed_2X.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/seawifs_1998-2006_GOLD_smoothed_2X.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/seawifs_1998-2006_GOLD_smoothed_2X.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/sgs_h2.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/sgs_h2.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/sgs_h2.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/tideamp.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/tideamp.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/global/siena_201204/INPUT/tideamp.nc )
  endif

  hsmget lustre/f2/pdata/gfdl/gfdl_O/datasets/CM2G63L/ulm/INPUT/WOA05_pottemp_salt.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/pdata/gfdl/gfdl_O/datasets/CM2G63L/ulm/INPUT/WOA05_pottemp_salt.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/pdata/gfdl/gfdl_O/datasets/CM2G63L/ulm/INPUT/WOA05_pottemp_salt.nc )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/analysis_vgrid_lev35.v1.cdl && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/analysis_vgrid_lev35.v1.cdl $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/analysis_vgrid_lev35.v1.cdl )
  endif

  hsmget lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/analysis_vgrid_lev35.v1.nc && \
  if (! -d $workDir/INPUT/) mkdir -p $workDir/INPUT/ && \
  ln -f $hsmDir/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/analysis_vgrid_lev35.v1.nc $workDir/INPUT/.
  if ( $status != 0 ) then
    set dataFilesNotOK = ( $dataFilesNotOK /lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z/INPUT/analysis_vgrid_lev35.v1.nc )
  endif



if ( $#dataFilesNotOK > 0 ) then
   if ( $echoOn ) unset echo
   foreach dataFile ( $dataFilesNotOK )
      echo "*ERROR*: A problem with the data file: $dataFile"
   end
   echo "*ERROR*: Failed to copy data files"
   if ( $echoOn ) set echo
   exit 1
endif

@ gridSpecStatus = 0

if ( ( $gridSpec:e == 'cpio' || $gridSpec:e == 'tar' ) && $gridSpec:r:e == 'nc' ) then
   hsmget $gridSpec:r:r:s+/++/\* && \
   find $hsmDir$gridSpec:r:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
   @ gridSpecStatus = $status
else if ( ( $gridSpec:e == 'cpio' || $gridSpec:e == 'tar' ) && $gridSpec:r:e != 'nc' ) then
   hsmget $gridSpec:r:s+/++/\* && \
   find $hsmDir$gridSpec:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
   @ gridSpecStatus = $status
else if ( $gridSpec:e == 'nc' ) then
   hsmget $gridSpec:s+/++ && \
   ln -f $hsmDir/$gridSpec:s+/++ $workDir/INPUT/grid_spec.nc
   @ gridSpecStatus = $status
else if ( $gridSpec != "" && -d "$gridSpec" ) then
   hsmget $gridSpec:s+/++/\* && \
   find $hsmDir$gridSpec -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
   @ gridSpecStatus = $status
else if ( $gridSpec != "" && -f "$gridSpec" ) then
   hsmget $gridSpec:s+/++ && \
   ln -f $hsmDir/$gridSpec:s+/++ $workDir/INPUT/grid_spec.nc
   @ gridSpecStatus = $status
endif

if ( $gridSpecStatus ) then
   if ( $echoOn ) unset echo
   echo "*ERROR*: Failed to copy grid specification"
   if ( $echoOn ) set echo
   exit 1
endif

unset gridSpecStatus

@ initCondStatus = 0

if ( ( $initCond:e == 'cpio' || $initCond:e == 'tar' ) && $initCond:r:e == 'nc' ) then
   hsmget $initCond:r:r:s+/++/\* && \
   find $hsmDir$initCond:r:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
   @ initCondStatus = $status
else if ( ( $initCond:e == 'cpio' || $initCond:e == 'tar' ) && $initCond:r:e != 'nc' ) then
   hsmget $initCond:r:s+/++/\* && \
   find $hsmDir$initCond:r -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
   @ initCondStatus = $status
else if ( $initCond:e == 'nc' ) then
   hsmget $initCond:s+/++ && \
   ln -f $hsmDir/$initCond:s+/++ $workDir/INPUT/.
   @ initCondStatus = $status
else if ( $initCond != "" && -d "$initCond" ) then
   hsmget $initCond:s+/++/\* && \
   find $hsmDir$initCond -maxdepth 1 -type f | xargs ln -f -t $workDir/INPUT
   @ initCondStatus = $status
else if ( $initCond != "" && -f "$initCond" ) then
   hsmget $initCond:s+/++ && \
   ln -f $hsmDir/$initCond:s+/++ $workDir/INPUT/.
   @ initCondStatus = $status
endif

if ( $initCondStatus ) then
   if ( $echoOn ) unset echo
   echo "*ERROR*: Failed to copy initial conditions"
   if ( $echoOn ) set echo
   exit 1
endif

unset initCondStatus

hsmget $executable:s+/++

set mom6ExpDir=/lustre/f2/dev/Jessica.Liptak/MOM6_solo_liptak_fork/mom6_solo_compile/src/mom6/MOM6-examples/ocean_only/global_ALE/z

cd $workDir

if ( $echoOn ) unset echo
ls -l INPUT/*
if ( $echoOn ) set echo

ln -f $ptmpDir$executable . || cp -pf $ptmpDir$executable .

if ( $status == 0 ) then
   if ( $echoOn ) unset echo
   echo "<NOTE> : Using the executable '$ptmpDir$executable'"
   if ( $echoOn ) set echo
else
   if ( $echoOn ) unset echo
   echo "*ERROR*: Failed to copy the executable"
   if ( $echoOn ) set echo
   exit 1
endif

cat >> diag_table <<EOF
"Global ALE Experiment"
1 1 1 0 0 0
"scalar",   1,"days",1,"days","Time",
"layer",    1,"days",1,"days","Time",
"prog",     1,"days",1,"days","Time",
"prog_z",   1,"days",1,"days","Time",
"ave_prog", 1,"days",1,"days","Time",
"tracer",   1,"days",1,"days","Time",
"cont",     1,"days",1,"days","Time",
#"mom",     5,"days",1,"days","Time",
#"bt_mom",   5,"days",1,"days","Time",
"visc",     1,"days",1,"days","Time",
#"energy",   5,"days",1,"days","Time",
"forcing",  12,"hours",1,"days","Time",
"surface",  12,"hours",1,"days","Time",
"sfc_ave",  12,"hours",1,"days","Time",
"ocean_static",       -1,"days",1,"days","time",
"cmor",               1,"days",1,"days","Time",
"cmor2",              1,"days",1,"days","Time",
"cmor_z",             1,"days",1,"days","Time",
"cmor_scalar",        1,"days",1,"days","Time",
"ocean_static_cmor", -1,"days",1,"days","time",
#This is the field section of the diag_table.
# Layer-Average Diagnostics:
#===========================
"ocean_model","temp_layer_ave","temp_layer_ave","layer","all",.true.,"none",2
"ocean_model","salt_layer_ave","salt_layer_ave","layer","all",.true.,"none",2
# Prognostic Ocean fields:
#=========================
"ocean_model","u","u","prog","all",.false.,"none",2
"ocean_model","v","v","prog","all",.false.,"none",2
"ocean_model","h","h","prog","all",.false.,"none",1
"ocean_model","e","e","prog","all",.false.,"none",2
"ocean_model","temp","temp","prog","all",.false.,"none",2
"ocean_model","salt","salt","prog","all",.false.,"none",2
#"ocean_model","Rml","Rml","prog","all",.false.,"none",2
#"ocean_model","RV","RV","prog","all",.false.,"none",2
#"ocean_model","PV","PV","prog","all",.false.,"none",2
#"ocean_model","e_D","e_D","prog","all",.false.,"none",2
"ocean_model","u","u","ave_prog","all",.true.,"none",2
"ocean_model","v","v","ave_prog","all",.true.,"none",2
"ocean_model","h","h","ave_prog","all",.true.,"none",1
"ocean_model","e","e","ave_prog","all",.true.,"none",2
#"ocean_model","temp","temp","ave_prog","all",.true.,"none",2
#"ocean_model","salt","salt","ave_prog","all",.true.,"none",2
#"ocean_model","Rml","Rml","ave_prog","all",.true.,"none",2
"ocean_model","mass_wt","mass_wt","surface","all",.false.,"none",1
"ocean_model","opottempmint","opottempmint","surface","all",.false.,"none",1  # GFDL name: temp_int
"ocean_model","somint","somint","surface","all",.false.,"none",1              # GFDL name: salt_int
"ocean_model","SSH","SSH","surface","all",.false.,"none",2
"ocean_model","SST","SST","surface","all",.false.,"none",1
"ocean_model","SSS","SSS","surface","all",.false.,"none",2
"ocean_model","speed","speed","surface","all",.false.,"none",2
"ocean_model","SSU","SSU","surface","all",.false.,"none",2
"ocean_model","SSV","SSV","surface","all",.false.,"none",2
"ocean_model","SSH","SSH","sfc_ave","all",.true.,"none",2
"ocean_model","SST","SST","sfc_ave","all",.true.,"none",2
"ocean_model","SSS","SSS","sfc_ave","all",.true.,"none",2
"ocean_model","speed","speed","sfc_ave","all",.true.,"none",2
"ocean_model","SSU","SSU","sfc_ave","all",.true.,"none",2
"ocean_model","SSV","SSV","sfc_ave","all",.true.,"none",2
# Z-space fields:
#==================
"ocean_model_z","u","u","prog_z","all",.true.,"none",2
"ocean_model_z","v","v","prog_z","all",.true.,"none",2
"ocean_model_z","temp","temp","prog_z","all",.true.,"none",2
"ocean_model_z","temp_xyave","temp_xyave","prog_z","all",.true.,"none",2
"ocean_model_z","salt","salt","prog_z","all",.true.,"none",2
# Auxilary Tracers:
#==================
#"ocean_model","vintage","vintage","prog","all",.false.,"none",2
#"ocean_model","agescc","agescc","prog","all",.false.,"none",2
# Continuity Equation Terms:
#===========================
#"ocean_model","dhdt","dhdt","cont","all",.true.,"none",2
"ocean_model","wd","wd","cont","all",.true.,"none",2
"ocean_model","uh","uh","cont","all",.true.,"none",2
"ocean_model","vh","vh","cont","all",.true.,"none",2
#"ocean_model","uhGM","uhGM","cont","all",.true.,"none",2
#"ocean_model","vhGM","vhGM","cont","all",.true.,"none",2
#"ocean_model","uhbt","uhbt","cont","all",.true.,"none",2
#"ocean_model","vhbt","vhbt","cont","all",.true.,"none",2
"ocean_model","h_rho","h_rho","cont","all",.true.,"none",2
"ocean_model","uh_rho","uh_rho","cont","all",.true.,"none",2
"ocean_model","vh_rho","vh_rho","cont","all",.true.,"none",2
"ocean_model","uhGM_rho","uhGM_rho","cont","all",.true.,"none",2
"ocean_model","vhGM_rho","vhGM_rho","cont","all",.true.,"none",2
"ocean_model","KHth_u","KHth_u","cont","all",.true.,"none",2
"ocean_model","KHth_v","KHth_v","cont","all",.true.,"none",2
"ocean_model","diftrblo","diftrblo","cont","all",.true.,"none",2
"ocean_model","diftrelo","difteblo","cont","all",.true.,"none",2
"ocean_model","KHTR_u","KHTR_u","cont","all",.true.,"none",2
"ocean_model","KHTR_v","KHTR_v","cont","all",.true.,"none",2
"ocean_model","GMwork","GMwork","cont","all",.true.,"none",2
"ocean_model","umo","umo","cont","all",.true.,"none",2
"ocean_model","vmo","vmo","cont","all",.true.,"none",2
"ocean_model","umo_2d","umo_2d","cont","all",.true.,"none",2
"ocean_model","vmo_2d","vmo_2d","cont","all",.true.,"none",2
# Continuity Equation Terms In Pure Potential Density Coordiantes:
#=================================================================
#"ocean_model","h_rho","h_rho","cont","all",.true.,"none",2
#"ocean_model","uh_rho","uh_rho","cont","all",.true.,"none",2
#"ocean_model","vh_rho","vh_rho","cont","all",.true.,"none",2
#"ocean_model","uhGM_rho","uhGM_rho","cont","all",.true.,"none",2
#"ocean_model","vhGM_rho","vhGM_rho","cont","all",.true.,"none",2
#
# Tracer Fluxes:
#==================
"ocean_model","T_adx",  "T_adx",  "tracer","all",.true.,"none",2
"ocean_model","T_ady",  "T_ady",  "tracer","all",.true.,"none",2
"ocean_model","T_diffx","T_diffx","tracer","all",.true.,"none",2
"ocean_model","T_diffy","T_diffy","tracer","all",.true.,"none",2
"ocean_model","S_adx",  "S_adx",  "tracer","all",.true.,"none",2
"ocean_model","S_ady",  "S_ady",  "tracer","all",.true.,"none",2
"ocean_model","S_diffx","S_diffx","tracer","all",.true.,"none",2
"ocean_model","S_diffy","S_diffy","tracer","all",.true.,"none",2
# T/S net tendency, lateral advection, and vertical remapping budget terms
#==================
# hfds-hfsifrazil = boundary_forcing_heat_tendency_2d
#"ocean_model","rsdoabsorb"                     ,"rsdoabsorb",                      "tracer","all",.true.,"none",2
#"ocean_model","boundary_forcing_temp_tendency" ,"boundary_forcing_temp_tendency",  "tracer","all",.true.,"none",2
#"ocean_model","boundary_forcing_saln_tendency" ,"boundary_forcing_saln_tendency",  "tracer","all",.true.,"none",2
#"ocean_model","boundary_forcing_heat_tendency" ,"boundary_forcing_heat_tendency",  "tracer","all",.true.,"none",2
#"ocean_model","boundary_forcing_salt_tendency" ,"boundary_forcing_salt_tendency",  "tracer","all",.true.,"none",2
#"ocean_model","boundary_forcing_heat_tendency_2d" ,"boundary_forcing_heat_tendency_2d",  "tracer","all",.true.,"none",2
#"ocean_model","boundary_forcing_salt_tendency_2d" ,"boundary_forcing_salt_tendency_2d",  "tracer","all",.true.,"none",2
# opottemptend_2d = T_advection_xy_2d + hfds + hfgeo + opottemppmdiff_2d
# note: Th_tendency_vert_remap_2d = 0
"ocean_model","T_tendency"          ,"T_tendency",               "tracer","all",.true.,"none",2
"ocean_model","S_tendency"          ,"S_tendency",               "tracer","all",.true.,"none",2
"ocean_model","opottemptend"        ,"opottemptend",             "tracer","all",.true.,"none",2
"ocean_model","osalttend"           ,"osalttend",                "tracer","all",.true.,"none",2
"ocean_model","opottemptend_2d"     ,"opottemptend_2d",          "tracer","all",.true.,"none",2
"ocean_model","osalttend_2d"        ,"osalttend_2d",             "tracer","all",.true.,"none",2
"ocean_model","T_advection_xy"      ,"T_advection_xy",           "tracer","all",.true.,"none",2
"ocean_model","S_advection_xy"      ,"S_advection_xy",           "tracer","all",.true.,"none",2
"ocean_model","T_advection_xy_2d"   ,"T_advection_xy_2d",        "tracer","all",.true.,"none",2
"ocean_model","S_advection_xy_2d"   ,"S_advection_xy_2d",        "tracer","all",.true.,"none",2
#"ocean_model","T_tendency_vert_remap","T_tendency_vert_remap",   "tracer","all",.true.,"none",2
#"ocean_model","S_tendency_vert_remap","S_tendency_vert_remap",   "tracer","all",.true.,"none",2
#"ocean_model","Th_tendency_vert_remap","Th_tendency_vert_remap", "tracer","all",.true.,"none",2
#"ocean_model","Sh_tendency_vert_remap","Sh_tendency_vert_remap", "tracer","all",.true.,"none",2
#"ocean_model","Th_tendency_vert_remap_2d","Th_tendency_vert_remap_2d", "tracer","all",.true.,"none",2
#"ocean_model","Sh_tendency_vert_remap_2d","Sh_tendency_vert_remap_2d", "tracer","all",.true.,"none",2
"ocean_model","frazil_heat_tendency","frazil_heat_tendency", "tracer","all",.true.,"none",2
"ocean_model","frazil_heat_tendency_2d","frazil_heat_tendency_2d", "tracer","all",.true.,"none",2
"ocean_model","frazil_temp_tendency","frazil_temp_tendency", "tracer","all",.true.,"none",2
# neutral diffusion tendencies for T and S
#==================
#"ocean_model","opottemppmdiff","opottemppmdiff",                  "tracer","all",.true.,"none",2
#"ocean_model","osaltpmdiff","osaltpmdiff",                        "tracer","all",.true.,"none",2
#"ocean_model","opottemppmdiff_2d","opottemppmdiff_2d",             "tracer","all",.true.,"none",2
#"ocean_model","osaltpmdiff_2d","osaltpmdiff_2d",                  "tracer","all",.true.,"none",2
#"ocean_model","ndiff_tracer_conc_tendency_T","ndiff_tracer_conc_tendency_T","tracer","all",.true.,"none",2
#"ocean_model","ndiff_tracer_conc_tendency_S","ndiff_tracer_conc_tendency_S","tracer","all",.true.,"none",2
# diabatic diffusion tendencies for T and S
# note: opottempdiff_2d = 0
#==================
#"ocean_model","opottempdiff"               ,"opottempdiff",               "tracer","all",.true.,"none",2
#"ocean_model","osaltdiff"                  ,"osaltdiff",                  "tracer","all",.true.,"none",2
#"ocean_model","opottempdiff_2d"          ,"opottempdiff_2d",          "tracer","all",.true.,"none",2
#"ocean_model","osaltdiff_2d"             ,"osaltdiff_2d",             "tracer","all",.true.,"none",2
#"ocean_model","diabatic_diff_temp_tendency","diabatic_diff_temp_tendency","tracer","all",.true.,"none",2
#"ocean_model","diabatic_diff_saln_tendency","diabatic_diff_saln_tendency","tracer","all",.true.,"none",2
# Momentum Balance Terms:
#=======================
#"ocean_model","dudt","dudt","mom","all",.true.,"none",2
#"ocean_model","dvdt","dvdt","mom","all",.true.,"none",2
#"ocean_model","CAu","CAu","mom","all",.true.,"none",2
#"ocean_model","CAv","CAv","mom","all",.true.,"none",2
#"ocean_model","PFu","PFu","mom","all",.true.,"none",2
#"ocean_model","PFv","PFv","mom","all",.true.,"none",2
#"ocean_model","du_dt_visc","du_dt_visc","mom","all",.true.,"none",2
#"ocean_model","dv_dt_visc","dv_dt_visc","mom","all",.true.,"none",2
#"ocean_model","diffu","diffu","mom","all",.true.,"none",2
#"ocean_model","diffv","diffv","mom","all",.true.,"none",2
#"ocean_model","dudt_dia","dudt_dia","mom","all",.true.,"none",2
#"ocean_model","dvdt_dia","dvdt_dia","mom","all",.true.,"none",2
# Subterms that should not be added to a closed budget.
#"ocean_model","gKEu","gKEu","mom","all",.true.,"none",2
#"ocean_model","gKEv","gKEv","mom","all",.true.,"none",2
#"ocean_model","rvxu","rvxu","mom","all",.true.,"none",2
#"ocean_model","rvxv","rvxv","mom","all",.true.,"none",2
#"ocean_model","PFu_bc","PFu_bc","mom","all",.true.,"none",2
#"ocean_model","PFv_bc","PFv_bc","mom","all",.true.,"none",2
# Barotropic Momentum Balance Terms:
# (only available with split time stepping.)
#===========================================
#"ocean_model","PFuBT","PFuBT","bt_mom","all",.true.,"none",2
#"ocean_model","PFvBT","PFvBT","bt_mom","all",.true.,"none",2
#"ocean_model","CoruBT","CoruBT","bt_mom","all",.true.,"none",2
#"ocean_model","CorvBT","CorvBT","bt_mom","all",.true.,"none",2
#"ocean_model","NluBT","NluBT","bt_mom","all",.true.,"none",2
#"ocean_model","NlvBT","NlvBT","bt_mom","all",.true.,"none",2
#"ocean_model","ubtforce","ubtforce","bt_mom","all",.true.,"none",2
#"ocean_model","vbtforce","vbtforce","bt_mom","all",.true.,"none",2
#"ocean_model","u_accel_bt","u_accel_bt","bt_mom","all",.true.,"none",2
#"ocean_model","v_accel_bt","v_accel_bt","bt_mom","all",.true.,"none",2
#
# Viscosities and diffusivities:
#===============================
"ocean_model","Kd_interface","Kd_interface","visc","all",.true.,"none",2
"ocean_model","Kd_layer","Kd_layer","visc","all",.true.,"none",2
"ocean_model","Kd_effective","Kd_effective","visc","all",.true.,"none",2
"ocean_model","Kd_itides","Kd_itides","visc","all",.true.,"none",2
"ocean_model","Kd_shear","Kd_shear","visc","all",.true.,"none",2
"ocean_model","Kd_BBL","Kd_BBL","visc","all",.true.,"none",2
#"ocean_model","Ahh","Ahh","visc","all",.true.,"none",2
#"ocean_model","Ahq","Ahq","visc","all",.true.,"none",2
#"ocean_model","Khh","Khh","visc","all",.true.,"none",2
#"ocean_model","Khq","Khq","visc","all",.true.,"none",2
#"ocean_model","bbl_thick_u","bbl_thick_u","visc","all",.true.,"none",2
#"ocean_model","kv_bbl_u","kv_bbl_u","visc","all",.true.,"none",2
#"ocean_model","bbl_thick_v","bbl_thick_v","visc","all",.true.,"none",2
#"ocean_model","kv_bbl_v","kv_bbl_v","visc","all",.true.,"none",2
#"ocean_model","av_visc","av_visc","visc","all",.true.,"none",2
#"ocean_model","au_visc","au_visc","visc","all",.true.,"none",2
#"ocean_model","FrictWork","FrictWork","visc","all",.true.,"none",2
"ocean_model","MLD_003","MLD_003","visc","all",.true.,"none",2
"ocean_model","subML_N2","subML_N2","visc","all",.true.,"none",2
"ocean_model","MEKE","MEKE","visc","all",.true.,"none",2
"ocean_model","MEKE_KH","MEKE_KH","visc","all",.true.,"none",2
"ocean_model","SN_u","SN_u","visc","all",.true.,"none",2
#
# Kinetic Energy Balance Terms:
#=============================
#"ocean_model","KE","KE","energy","all",.true.,"none",2
#"ocean_model","dKE_dt","dKE_dt","energy","all",.true.,"none",2
#"ocean_model","PE_to_KE","PE_to_KE","energy","all",.true.,"none",2
#"ocean_model","KE_Coradv","KE_Coradv","energy","all",.true.,"none",2
#"ocean_model","KE_adv","KE_adv","energy","all",.true.,"none",2
#"ocean_model","KE_visc","KE_visc","energy","all",.true.,"none",2
#"ocean_model","KE_horvisc","KE_horvisc","energy","all",.true.,"none",2
#"ocean_model","KE_dia","KE_dia","energy","all",.true.,"none",2
# Surface Forcing:
#=================
"ocean_model","taux","taux",                                    "forcing","all",.true.,"none",2
"ocean_model","tauy","tauy",                                    "forcing","all",.true.,"none",2
"ocean_model","ustar","ustar",                                  "forcing","all",.true.,"none",2
"ocean_model","p_surf","p_surf",                                "forcing","all",.true.,"none",2
#
"ocean_model","PRCmE","PRCmE",                                  "forcing","all",.true.,"none",1
"ocean_model","net_massin","net_massin",                        "forcing","all",.true.,"none",1
"ocean_model","net_massout","net_massout",                      "forcing","all",.true.,"none",1
"ocean_model","lrunoff","lrunoff",                              "forcing","all",.true.,"none",1
"ocean_model","frunoff","frunoff",                              "forcing","all",.true.,"none",1
"ocean_model","lprec","lprec",                                  "forcing","all",.true.,"none",1
"ocean_model","fprec","fprec",                                  "forcing","all",.true.,"none",1
"ocean_model","vprec","vprec",                                  "forcing","all",.true.,"none",1
"ocean_model","evap","evap",                                    "forcing","all",.true.,"none",1
#
"ocean_model","net_heat_coupler","net_heat_coupler",            "forcing","all",.true.,"none",1
"ocean_model","net_heat_surface","net_heat_surface",            "forcing","all",.true.,"none",1
"ocean_model","SW","SW",                                        "forcing","all",.true.,"none",1
"ocean_model","LW","LW",                                        "forcing","all",.true.,"none",1
"ocean_model","LwLatSens","LwLatSens",                          "forcing","all",.true.,"none",1
"ocean_model","salt_flux","salt_flux",                          "forcing","all",.true.,"none",1
"ocean_model","Heat_PmE","Heat_PmE",                            "forcing","all",.true.,"none",1
"ocean_model","frazil","frazil",                                "forcing","all",.true.,"none",1
"ocean_model","internal_heat","internal_heat",                  "forcing","all",.true.,"none",1
"ocean_model","heat_added","heat_added",                       "forcing","all",.true.,"none",1
#
"ocean_model","heat_content_cond","heat_content_cond",          "forcing","all",.true.,"none",1
"ocean_model","heat_content_lprec","heat_content_lprec",        "forcing","all",.true.,"none",1
"ocean_model","heat_content_fprec","heat_content_fprec",        "forcing","all",.true.,"none",1
"ocean_model","heat_content_vprec","heat_content_vprec",        "forcing","all",.true.,"none",1
"ocean_model","heat_content_lrunoff","heat_content_lrunoff",    "forcing","all",.true.,"none",1
"ocean_model","heat_content_frunoff","heat_content_frunoff",    "forcing","all",.true.,"none",1
"ocean_model","heat_content_surfwater","heat_content_surfwater","forcing","all",.true.,"none",1
"ocean_model","heat_content_massout","heat_content_massout",    "forcing","all",.true.,"none",1
"ocean_model","heat_content_massin","heat_content_massin",      "forcing","all",.true.,"none",1
#
"ocean_model","total_prcme","total_prcme",                      "forcing","all",.true.,"none",2
"ocean_model","total_evap","total_evap",                        "forcing","all",.true.,"none",2
"ocean_model","total_lprec","total_lprec",                      "forcing","all",.true.,"none",2
"ocean_model","total_fprec","total_fprec",                      "forcing","all",.true.,"none",2
"ocean_model","total_vprec","total_vprec",                      "forcing","all",.true.,"none",2
"ocean_model","total_precip","total_precip",                    "forcing","all",.true.,"none",2
"ocean_model","total_lrunoff","total_lrunoff",                  "forcing","all",.true.,"none",2
"ocean_model","total_frunoff","total_frunoff",                  "forcing","all",.true.,"none",2
"ocean_model","total_net_massin","total_net_massin" ,           "forcing","all",.true.,"none",2
"ocean_model","total_net_massout","total_net_massout",          "forcing","all",.true.,"none",2
#
"ocean_model","total_heat_content_frunoff"   ,"total_heat_content_frunoff",   "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_lrunoff"   ,"total_heat_content_lrunoff",   "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_lprec"     ,"total_heat_content_lprec",     "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_fprec"     ,"total_heat_content_fprec",     "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_vprec"     ,"total_heat_content_vprec",     "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_cond"      ,"total_heat_content_cond",      "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_surfwater" ,"total_heat_content_surfwater", "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_massin"    ,"total_heat_content_massin",    "forcing","all",.true.,"none",2
"ocean_model","total_heat_content_massout"   ,"total_heat_content_massout",   "forcing","all",.true.,"none",2
"ocean_model","total_net_heat_coupler"       ,"total_net_heat_coupler",       "forcing","all",.true.,"none",2
"ocean_model","total_net_heat_surface"       ,"total_net_heat_surface",       "forcing","all",.true.,"none",2
"ocean_model","total_sw"                     ,"total_sw",                     "forcing","all",.true.,"none",2
"ocean_model","total_LwLatSens"              ,"total_LwLatSens",              "forcing","all",.true.,"none",2
"ocean_model","total_lw"                     ,"total_lw",                     "forcing","all",.true.,"none",2
"ocean_model","total_lat"                    ,"total_lat",                    "forcing","all",.true.,"none",2
"ocean_model","total_lat_evap"               ,"total_lat_evap",               "forcing","all",.true.,"none",2
"ocean_model","total_lat_fprec"              ,"total_lat_fprec",              "forcing","all",.true.,"none",2
"ocean_model","total_lat_frunoff"            ,"total_lat_frunoff",            "forcing","all",.true.,"none",2
"ocean_model","total_sens"                   ,"total_sens",                   "forcing","all",.true.,"none",2
#"ocean_model","total_heat_added"            ,"total_heat_added",             "forcing","all",.true.,"none",2
"ocean_model","total_salt_flux"              ,"total_salt_flux",              "forcing","all",.true.,"none",2
"ocean_model","total_salt_flux_in"           ,"total_salt_flux_in",           "forcing","all",.true.,"none",2
#"ocean_model","total_salt_flux_added"       ,"total_salt_flux_added",        "forcing","all",.true.,"none",2
#
#
 "ocean_model",  "hfgeou",          "hfgeou",           "cmor2",        "all", "none", "none",2  # geothermal heat flux
 "ocean_model",  "hfrainds",        "hfrainds",         "cmor2",        "all", "mean", "none",2
 "ocean_model",  "hfevapds",        "hfevapds",         "cmor2",        "all", "mean", "none",2
 "ocean_model",  "hfrunoffds",      "hfrunoffds",       "cmor2",        "all", "mean", "none",2
 "ocean_model",  "hfsnthermds",     "hfsnthermds",      "cmor2",        "all", "mean", "none",2
 "ocean_model",  "hfsifrazil",      "hfsifrazil",       "cmor2",        "all", "mean", "none",2
#"ocean_model",  "hfsithermds",     "hfsithermds",      "cmor2",        "all", "mean", "none",2  # computed in SIS2
 "ocean_model",  "hfibthermds",     "hfibthermds",      "cmor2",        "all", "mean", "none",2
#"ocean_model",  "hfsolidrunoffds", "hfsolidrunoffds",  "cmor2",        "all", "mean", "none",2  # =0 if ice = 0C
 "ocean_model",  "rlntds",          "rlntds",           "cmor2",        "all", "mean", "none",2
 "ocean_model",  "hflso",           "hflso",            "cmor2",        "all", "mean", "none",2
 "ocean_model",  "hfsso",           "hfsso",            "cmor2",        "all", "mean", "none",2
 "ocean_model",  "rsntds",          "rsntds"            "cmor2",        "all", "mean", "none",2
#"ocean_model",  "rsdoabsorb",      "rsdoabsorb"        "cmor2",        "all", "mean", "none",2
#"ocean_model",  "rsdo",            "rsdo"              "cmor2",        "all", "mean", "none",2
 "ocean_model",  "hfds",            "hfds"              "cmor2",        "all", "mean", "none",2
#
#
# Fields for CMIP6 (CMOR Names):
#=======================================
"ocean_model","pso","pso"                   ,"cmor","all",.true.,"none",2  # GFDL Name: p_surf
"ocean_model","tauuo","tauuo"               ,"cmor","all",.true.,"none",2  # surface i-stress
"ocean_model","tauvo","tauvo"               ,"cmor","all",.true.,"none",2  # surface j-stress
"ocean_model","wfo","wfo"                   ,"cmor","all",.true.,"none",2  # GFDL Name: PRCmE
"ocean_model","rsntds","rsntds"             ,"cmor","all",.true.,"none",2  # GFDL Name: SW
"ocean_model","rlntds","rlntds"             ,"cmor","all",.true.,"none",2  # GFDL Name: SW
"ocean_model","hfibthermds","hfibthermds"   ,"cmor","all",.true.,"none",2  # GFDL Name: heat_content_frunoff
"ocean_model","hfrunoffds","hfrunoffds"     ,"cmor","all",.true.,"none",2  # GFDL Name: runoff_heat_content
"ocean_model","hfsifrazil","hfsifrazil"     ,"cmor","all",.true.,"none",2  # GFDL Name: frazil
"ocean_model","evs","evs"                   ,"cmor","all",.true.,"none",2  # GFDL Name: evap
"ocean_model","prlq","prlq"                 ,"cmor","all",.true.,"none",2  # GFDL Name: fprec
"ocean_model","prsn","prsn"                 ,"cmor","all",.true.,"none",2  # GFDL Name: fprec
"ocean_model","hflso","hflso"               ,"cmor","all",.true.,"none",2  # GFDL Name: latent
"ocean_model","friver","friver"             ,"cmor","all",.true.,"none",2  # GFDL Name: lrunoff
#"ocean_model","rlds","rlds"                 ,"cmor","all",.true.,"none",2  # GFDL Name: LW
#"ocean_model","hfss","hfss"                 ,"cmor","all",.true.,"none",2  # GFDL Name: sensible
"ocean_model","hfds","hfds"                 ,"cmor","all",.true.,"none",2  # GFDL Name: net_heat_surface
"ocean_model","sfdsi","sfdsi"               ,"cmor","all",.true.,"none",2  # GFDL Name: salt_flux
"ocean_model","uo","uo"                     ,"cmor","all",.true.,"none",2	 # GFDL Name: u
"ocean_model","vo","vo"                     ,"cmor","all",.true.,"none",2	 # GFDL Name: v
"ocean_model","so","so"                     ,"cmor","all",.true.,"none",2	 # GFDL Name: salinity
"ocean_model","masscello","masscello"       ,"cmor","all",.true.,"none",2	 # mass of ocean cells
"ocean_model","pbo","pbo"                   ,"cmor","all",.true.,"none",2  # GFDL Name: n/a
"ocean_model","mlotst","mlotst"             ,"cmor","all",.true.,"none",2  # GFDL Name: MLD_003
"ocean_model","mlotstsq","mlotstsq"         ,"cmor","all",.true.,"none",2  # GFDL Name: n/a
"ocean_model","zos","zos"                   ,"cmor","all",.true.,"none",2	 # dynamic sealevel
"ocean_model","zossq","zossq"               ,"cmor","all",.true.,"none",2	 # squared zos
"ocean_model","hfgeou","hfgeou"             ,"cmor","all",.false.,"none",2 # GFDL name: geo_heat
"ocean_model","thkcello","thkcello"         ,"cmor","all",.true.,"none",2  # GFDL name: h if Bouss
"ocean_model","opottempmint","opottempmint" ,"cmor","all",.true.,"none",2  # GFDL name: temp_int
"ocean_model","somint","somint"             ,"cmor","all",.true.,"none",2  # GFDL name: salt_int
"ocean_model","obvfsq","obvfsq"             ,"cmor","all",.true.,"none",2  # GFDL name: N2
"ocean_model","difvho","difvho"             ,"cmor","all",.true.,"none",2  # GFDL name: N2
"ocean_model","difvso","difvso"             ,"cmor","all",.true.,"none",2  # GFDL name: N2
"ocean_model","difmxylo","difmxylo"         ,"cmor","all",.true.,"none",2  # GFDL name: N2
"ocean_model","difmxybo","difmxybo"         ,"cmor","all",.true.,"none",2  # GFDL name: N2
"ocean_model","dispkexyfo","dispkexyfo"     ,"cmor","all",.true.,"none",2  # GFDL name: N2
#
#
# Z-Space Fields Provided for CMIP6 (CMOR Names):
#===============================================
"ocean_model_z","uo",    "uo",    "cmor_z","all",.true.,"none",2  #GFDL Name: u_z
"ocean_model_z","vo",    "vo",    "cmor_z","all",.true.,"none",2  #GFDL Name: v_z
"ocean_model_z","so",    "so",    "cmor_z","all",.true.,"none",2  #GFDL Name: salt_z
"ocean_model_z","thetao","thetao","cmor_z","all",.true.,"none",2  #GFDL Name: temp_z
"ocean_model_z","umo",   "umo",   "cmor_z","all",.true.,"none",2  #GFDL Name: uh_z
"ocean_model_z","vmo",   "vmo",   "cmor_z","all",.true.,"none",2  #GFDL Name: vh_z
#
# Scalar ocean fields for CMIP6 (CMOR Names):
#=====================
"ocean_model", "masso",       "masso",       "cmor_scalar",  "all", .true.,  "none",2  # global mean masscello
"ocean_model", "thetaoga",    "thetaoga",    "cmor_scalar",  "all", .true.,  "none",2  # global mean theta
"ocean_model", "soga",        "soga",        "cmor_scalar",  "all", .true.,  "none",2  # global mean saln
"ocean_model", "tosga",       "tosga",       "cmor_scalar",  "all", .true.,  "none",2  # area mean SST
"ocean_model", "sosga",       "sosga",       "cmor_scalar",  "all", .true.,  "none",2  # area mean SSS
"ocean_model", "volo",        "volo",        "cmor_scalar",  "all", .true.,  "none",2  # ocean volume
# Scalar fields for run-time monitoring:
#=======================================
"ocean_model", "masso",               "masso",               "scalar",  "all", .true.,  "none",2  # global mean masscello
"ocean_model", "thetaoga",            "thetaoga",            "scalar",  "all", .true.,  "none",2  # global mean theta
"ocean_model", "soga",                "soga",                "scalar",  "all", .true.,  "none",2  # global mean salinity
"ocean_model", "tosga",               "tosga",               "scalar",  "all", .true.,  "none",2  # area mean SST
"ocean_model", "sosga",               "sosga",               "scalar",  "all", .true.,  "none",2  # area mean SSS
"ocean_model", "volo",                "volo",                "scalar",  "all", .true.,  "none",2  # ocean volume
"ocean_model", "ssh_ga",              "ssh_ga",              "scalar",  "all", .true.,  "none",2  # global mean ssh
"ocean_model", "prcme_ga",            "prcme_ga",            "scalar",  "all", .true.,  "none",2  # global mean prcme
"ocean_model", "precip_ga",           "precip_ga",           "scalar",  "all", .true.,  "none",2  # global mean precip
"ocean_model", "evap_ga",             "evap_ga",             "scalar",  "all", .true.,  "none",2  # global mean evaporation
"ocean_model", "net_heat_coupler_ga", "net_heat_coupler_ga", "scalar",  "all", .true.,  "none",2  # global mean net heat coupler
"ocean_model", "net_heat_surface_ga", "net_heat_surface_ga", "scalar",  "all", .true.,  "none",2  # global mean net heat surface
"ocean_model", "sens_ga",             "sens_ga",             "scalar",  "all", .true.,  "none",2  # global mean sensible heat
"ocean_model", "LwLatSens_ga",        "LwLatSens_ga",        "scalar",  "all", .true.,  "none",2  # global mean LW + latent + sensible
"ocean_model", "sw_ga",               "sw_ga",               "scalar",  "all", .true.,  "none",2  # global mean SW
"ocean_model", "lw_ga",               "lw_ga",               "scalar",  "all", .true.,  "none",2  # global mean LW
"ocean_model", "lat_ga",              "lat_ga",              "scalar",  "all", .true.,  "none",2  # global mean latent
# Static ocean fields:
#=====================
"ocean_model", "geolon",      "geolon",      "ocean_static", "all", .false., "none", 1
"ocean_model", "geolat",      "geolat",      "ocean_static", "all", .false., "none", 1
"ocean_model", "geolon_c",    "geolon_c",    "ocean_static", "all", .false., "none", 2
"ocean_model", "geolat_c",    "geolat_c",    "ocean_static", "all", .false., "none", 2
"ocean_model", "geolon_u",    "geolon_u",    "ocean_static", "all", .false., "none", 2
"ocean_model", "geolat_u",    "geolat_u",    "ocean_static", "all", .false., "none", 2
"ocean_model", "geolon_v",    "geolon_v",    "ocean_static", "all", .false., "none", 2
"ocean_model", "geolat_v",    "geolat_v",    "ocean_static", "all", .false., "none", 2
"ocean_model", "area_t",      "area_t",      "ocean_static", "all", .false., "none", 1
"ocean_model", "depth_ocean", "depth_ocean", "ocean_static", "all", .false., "none", 2
"ocean_model", "wet",         "wet",         "ocean_static", "all", .false., "none", 1
"ocean_model", "wet_c",       "wet_c",       "ocean_static", "all", .false., "none", 2
"ocean_model", "wet_u",       "wet_u",       "ocean_static", "all", .false., "none", 2
"ocean_model", "wet_v",       "wet_v",       "ocean_static", "all", .false., "none", 2
"ocean_model", "Coriolis",    "Coriolis",    "ocean_static", "all", .false., "none", 2
# Static ocean fields:
#=====================
"ocean_model", "areacello",      "areacello",      "ocean_static_cmor", "all", .false., "none", 2
#=============================================================================================
#
#====> This file can be used with diag_manager/v2.0a (or higher) <====
#
#
#  FORMATS FOR FILE ENTRIES (not all input values are used)
#  ------------------------
#
#"file_name", output_freq, "output_units", format, "time_units", "time_long_name", ...
#   (opt) new_file_frequecy, (opt) "new_file_freq_units", "new_file_start_date"
#
#
#output_freq:  > 0  output frequency in "output_units"
#              = 0  output frequency every time step
#              =-1  output frequency at end of run
#
#output_units = units used for output frequency
#               (years, months, days, minutes, hours, seconds)
#
#time_units   = units used to label the time axis
#               (days, minutes, hours, seconds)
#
#
#  FORMAT FOR FIELD ENTRIES (not all input values are used)
#  ------------------------
#
#"module_name", "field_name", "output_name", "file_name" "time_sampling", time_avg, "other_opts", packing
#
#time_avg = .true. or .false.
#
#packing  = 1  double precision
#         = 2  float
#         = 4  packed 16-bit integers
#         = 8  packed 1-byte (not tested?)
EOF



touch data_table





cat > input.nml.unexpanded <<\EOF
 &MOM_input_nml
         output_directory = './',
         input_filename = 'n'
         restart_input_dir = 'INPUT/',
         restart_output_dir = 'RESTART/',
         parameter_filename = 'INPUT/MOM_input','INPUT/MOM_override'
/

 &diag_manager_nml

/

 &fms_nml
         clock_grain='MODULE',
         clock_flags='NONE',
         domains_stack_size = 810000,
         stack_size = 0
/

 &ocean_domains_nml

/

 &ocean_solo_nml
            months = $months
            days   = $days
            date_init = 1,1,1,0,0,0
            hours = 0
            minutes = 0
            seconds = 0
            calendar = 'julian'
/

\EOF


set months = $monthslist[1]
set days = $dayslist[1]
set hours = $hourslist[1]
set adjust_dry_mass = `adjust_dry_mass_tool`



set | sort > $envFile
sleep $envFileDelay
set -r | sort >> $envFile
sleep $envFileDelay
env --unset=TERMCAP | grep -e '^[a-zA-Z0-9_]*=' | sort >> $envFile

expandVariables $envFile < input.nml.unexpanded > input.nml || exit 1

rm -f $envFile

if ( $?FRE_STAGE ) then
   if ( $FRE_STAGE == 'CHAIN' ) then
      if ( -f $scriptName ) then
         if ( -r $scriptName ) then
            set result = `submit $scriptName`
            if ( $status == 0 ) then
               if ( $echoOn ) unset echo
               echo "<NOTE> : The job '$result' to run the '$scriptName' has been submitted successfully"
               if ( $echoOn ) set echo
   #            workDirCleaner $workDir
               if ( $echoOn ) unset echo
               echo "<NOTE> : Natural end-of-input-chaining for '$scriptName'"
               if ( $echoOn ) set echo
               exit 0
            else
       #        workDirCleaner $workDir
               if ( $echoOn ) unset echo
               echo "*ERROR*: Can't submit the '$scriptName'"
               if ( $echoOn ) set echo
               exit 1
            endif
            unset result
         else
         #   workDirCleaner $workDir
            if ( $echoOn ) unset echo
            echo "*ERROR*: The script '$scriptName' exists, but is not readable - it can't be submitted"
            if ( $echoOn ) set echo
            exit 1
         endif
      else
      #   workDirCleaner $workDir
         if ( $echoOn ) unset echo
         echo "*ERROR*: The script '$scriptName' does not exist - it can't be submitted"
         if ( $echoOn ) set echo
         exit 1
      endif
   else if ( $FRE_STAGE == 'DEBUG' ) then
      if ( $echoOn ) unset echo
      echo "<NOTE> : The working directory '$workDir' is ready for debugging"
      echo "<NOTE> : Natural end-of-debug-staging for '$scriptName'"
      if ( $echoOn ) set echo
      exit 0
   else
    #  workDirCleaner $workDir
      if ( $echoOn ) unset echo
      echo "<NOTE> : Natural end-of-input-staging for '$scriptName'"
      if ( $echoOn ) set echo
      exit 0
   endif
endif

################################################################################
#------------------------------ remote settings --------------------------------
################################################################################

set outputDirRemoteAscii = $archiveDirRemote
set outputDirRemoteRestart = $archiveDirRemote

if ( $?flagOutputCacheHistoryOn ) then
   set outputDirRemoteHistory = $stmpDirRemote
else
   set outputDirRemoteHistory = $archiveDirRemote
endif

if ( $?flagOutputXferOn && $?flagOutputPostProcessOn ) then
   set xmlFilesRemote = ( )
   foreach xmlFile ( $xmlFiles )
      set xmlFileRemote = `echo $xmlFile | sed -r "$patternSedHome;$patternSedSCRATCH;$patternSedDEV"`
      if ( $echoOn ) unset echo
      echo "<NOTE> : The file '$xmlFile' will be copied to the file '$xmlFileRemote' @ GFDL to be used in the post-processing..."
      if ( $echoOn ) set echo
      set xmlFilesRemote = ( $xmlFilesRemote $xmlFileRemote )
      unset xmlFileRemote
   end
   set -r xmlFilesRemote = ( $xmlFilesRemote )
else
   set -r xmlFilesRemote = ( )
endif

################################################################################
#------------------------------- the main loop ---------------------------------
################################################################################

while ( $irun <= $segmentsPerJob && $currentSeg <= $segmentsPerSimulation )
   banner $currentSeg/$segmentsPerSimulation

   # ---------------- test checkpointing conditions and exit if it has been requested

   if ( $?batch ) then
      if ( -e $checkPointDir/all ) then
         if ( $echoOn ) unset echo
         echo "<NOTE> : The checkpointing condition 'all' is on - exiting..."
         if ( $echoOn ) set echo
         exit 99
      else if ( -e $checkPointDir/$SLURM_CLUSTER_NAME ) then
         if ( $echoOn ) unset echo
         echo "<NOTE> : The checkpointing condition '$SLURM_CLUSTER_NAME' is on - exiting..."
         if ( $echoOn ) set echo
         exit 99
      else if ( -e $checkPointDir/$SLURM_CLUSTER_NAME-$SLURM_JOB_QOS ) then
         if ( $echoOn ) unset echo
         echo "<NOTE> : The checkpointing condition '$SLURM_CLUSTER_NAME-$SLURM_JOB_QOS' is on - exiting..."
         if ( $echoOn ) set echo
         exit 99
      else if ( -e $checkPointDir/$SLURM_JOB_USER ) then
         if ( $echoOn ) unset echo
         echo "<NOTE> : The checkpointing condition '$SLURM_JOB_USER' is on - exiting..."
         if ( $echoOn ) set echo
         exit 99
      endif
   endif

   # ---------------- reload the queue file and exit if it has been requested

   if ( $?flagRunTypeProduction ) then
      if ( -f $queue_file ) then
         if ( -r $queue_file ) then
            source $queue_file
         else
            if ( $echoOn ) unset echo
            echo "*ERROR*: The queue file '$queue_file' is not readable"
            if ( $echoOn ) set echo
            exit 1
         endif
      endif

      if ( ! $continueFlag ) then
         if ( $echoOn ) unset echo
         echo "<NOTE> : Stopping execution"
         if ( $echoOn ) set echo
         exit 0
      endif
   endif

   # ---------------- commands, copied from XML (experiment/input/csh[@type="always" or @type="postInit"])


         
#------------------------------------------
## Find out whether to restart.

if ( $currentSeg == 1 ) then
   set restart_flag = 'n'
else
   set restart_flag = 'r'
endif

cd $work
## Run the model
#------------------------------------------
#Niki: Add if( $months > 0 ) 
## Format existing diagTable to use for monthly rather than daily output
if ( $months > 0 ) then
sed -i -e 's/\"days\",1/\"months\",1/g' diag_table
endif

  

   cd $workDir

   # ---------------- expand namelists

   #set months = $monthslist[$irun]
   set days = $dayslist[$irun]
   #set hours = $hourslist[$irun]
   #set adjust_dry_mass = `adjust_dry_mass_tool`

   #set | sort > $envFile
  # sleep $envFileDelay
   #set -r | sort >> $envFile
  # sleep $envFileDelay
   #env --unset=TERMCAP | grep -e '^[a-zA-Z0-9_]*=' | sort >> $envFile

   #expandVariables $envFile < input.nml.unexpanded > input.nml || exit 1

   #rm -f $envFile

   # ---------------- prepare MPI call, execute it, analyze results

   if ( $target =~ '*openmp*' ) then
      if ( ! $?OMP_NUM_THREADS ) setenv OMP_NUM_THREADS 1
   else
      unsetenv OMP_NUM_THREADS
   endif

   echo "Time before runCommand"
   date

   # 2019-2-19 ceb temporarily run srun-multi --test before running for real
   #runCommandTest

   #runCommand |& tee fms.out

   if ( $status == 0 ) then
      if ( $echoOn ) unset echo
      echo "<NOTE> : The MPI launcher (srun) exited normally"
      if ( $echoOn ) set echo
   else if ( $status == 1 ) then
      set msg =       "*ERROR*: Automatic message from the job '$FRE_JOBID'\n"
      set msg = "${msg}*ERROR*: -----------------------------------------------------------------------\n"
      set msg = "${msg}*ERROR*: The MPI launcher (srun) exited with error status\n"
      set msg = "${msg}*ERROR*: \n"
      set msg = "${msg}*ERROR*: Possible Reasons: incorrect srun options (for example more cores specified\n"
      set msg = "${msg}*ERROR*: than available), node failure or untrapped srun error.\n"
      set msg = "${msg}*ERROR*: \n"
      set msg = "${msg}*ERROR*: Please see the job stdout, located at:\n"
      set msg = "${msg}*ERROR*: \n"
      set msg = "${msg}*ERROR*: \t$stdoutDir/$FRE_JOBID\n"
      set msg = "${msg}*ERROR*: \n"

      set MPI_FAIL
   else
      set msg =       "*ERROR*: Automatic message from the job '$FRE_JOBID'\n"
      set msg = "${msg}*ERROR*: -----------------------------------------------------------------------\n"
      set msg = "${msg}*ERROR*: The MPI launcher (srun) exited abnormally\n"
      set msg = "${msg}*ERROR*: \n"
      set msg = "${msg}*ERROR*: Possible Reasons: job cancelled or job ended through MPI_Abort or segfault.\n"
      set msg = "${msg}*ERROR*: \n"
      set msg = "${msg}*ERROR*: Please see the job stdout, located at:\n"
      set msg = "${msg}*ERROR*: \n"
      set msg = "${msg}*ERROR*: \t$stdoutDir/$FRE_JOBID\n"
      set msg = "${msg}*ERROR*: \n"

      set MPI_FAIL
   endif

   if ( $?MPI_FAIL ) then
      set coreFiles = ( `ls core*` )

      if ( $#coreFiles > 0 ) then
         if ( ! $?MPI_COREDUMP_DEBUGGER ) setenv MPI_COREDUMP_DEBUGGER 'gdb -batch'
         echo 'where' > .gdbinit

         set coreFileFirst = $coreFiles[1]
         echo "Dump of the core file '$coreFileFirst'" > $coreFileFirst.out
         $MPI_COREDUMP_DEBUGGER $executable:t $coreFileFirst >> $coreFileFirst.out
         cat $coreFileFirst.out >> fms.out
         cat $coreFileFirst.out
         unset coreFileFirst

         set msg = "${msg}*ERROR*: Your job has produced $#coreFiles core files (segment $currentSeg)\n"
         set msg = "${msg}*ERROR*: Please go to the working directory '$workDir' and issue the following command for each core file there:\n"
         set msg = "${msg}*ERROR*: \n"

         @ count = 0
         @ countMax = 20

         foreach coreFile ( $coreFiles )
            set msg = "${msg}*ERROR*: \t$MPI_COREDUMP_DEBUGGER $executable:t $coreFile >> $coreFile.out\n"
            if ( $count < $countMax ) then
               @ count++
            else
               break
            endif
         end

         set msg = "${msg}*ERROR*: \n"
         set msg = "${msg}*ERROR*: FRE has executed the command above for one core file and echoed the result to the job stdout.\n"

         if ( $count == $countMax ) then
            set msg = "${msg}*ERROR*: In order to save space only the first $countMax core files are presented in this list.\n"
            set msg = "${msg}*ERROR*: \n"
         endif

         unset countMax
         unset count
      else
         set cdsize = `limit coredumpsize`
         set msg = "${msg}*ERROR*: No core files produced (segment $currentSeg)\n"
         set msg = "${msg}*ERROR*: You are using the $cdsize\n"
         set msg = "${msg}*ERROR*: \n"
         unset cdsize
      endif

      set msg = "${msg}*ERROR*: -----------------------------------------------------------------------\n"
      set msg = "${msg}*ERROR*: This message has been generated by FRE\n"
      set msg = "${msg}*ERROR*: `date`"

      if ( $?batch ) then
         if ( $echoOn ) unset echo
         printf "$msg" | mailx -s "The MPI launcher has failed" $USER@noaa.gov
         printf "$msg"
         if ( $echoOn ) set echo
      endif

      unset coreFiles
      unset msg

      set outputDir = ${outputDir}_crash
   endif

   echo "Time after runCommand"
   date

 
   # ---------------- save restart files, namelist, tables etc. and move them from RESTART to INPUT

